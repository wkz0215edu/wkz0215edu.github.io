var ad_code = 1;//1广告
var current_play_idf = 0;//当前正在播放的唯一id
var query = document.querySelector.bind(document);
var queryAll = document.querySelectorAll.bind(document);
var fromId = document.getElementById.bind(document);
var fromClass = document.getElementsByClassName.bind(document);
var fromTag = document.getElementsByTagName.bind(document);

var video = fromId('videoView');
var audio = fromId('audioView');
var isPlay = fromId('plago');
var songtitle = fromId('play_title');
var playprev = fromId('playprev');
var playnext = fromId('playnext');
var playback = fromId('playback');
$(playback).hide();
var playadvance = fromId('playadvance');
$(playadvance).hide();
var progress = query('.progress-holder');

var currPlayTime = fromId('nowTime');
var totalTime = fromId('allTime');
var loaded = query('.play-progress');
var downed = query('.load-progress');
var mouse = query('.mouse-display');

var order = fromClass('playlist_song');

var max_play_schedule = {};         //最大播放的位置
var real_time_play_schedule = {};   //最后播放位置
var is_played_ended = false;    //音视频是否已经播放过并且结束，且没有开始新的播放

var NUM;//当前列表下标
var VATYPE; //播放类型
var SAFE;//加密方式
var playWay = 'order';//播放方式 order顺序播放 -- loop循环播放
var isAd = false;
var cookieTime;//缓存时间
var cookie = {
    set: function (name, value) {
        var Days = 30;
        var exp = new Date();
        exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
        document.cookie = name + '=' + escape(value) + ';expires=' + exp.toGMTString()
    },
    get: function (name) {
        var arr, reg = new RegExp('(^| )' + name + '=([^;]*)(;|$)');
        if (arr = document.cookie.match(reg)) {
            return unescape(arr[2])
        } else {
            return null
        }
    },
    del: function (name) {
        var exp = new Date();
        exp.setTime(exp.getTime() - 1);
        var cval = cookie.get(name);
        if (cval != null) {
            document.cookie = name + '=' + cval + ';expires=' + exp.toGMTString()
        }
    }
};

var firstMp4Time = 1;

// 事件绑定一次
Element.prototype.once = function (type, callback) {
    var handle = function () {
        callback = callback.call(this)
        this.removeEventListener(type, handle)
    }
    this.addEventListener(type, handle)
}

function once(dom, type, callback) {
    var handle = function () {
        callback()
        dom.removeEventListener(type, handle)
    }
    dom.addEventListener(type, handle)
}

// 判断浏览器
var browser = {
    versions: function () {
        var u = navigator.userAgent,
            app = navigator.appVersion;
        var sUserAgent = navigator.userAgent;
        return {
            trident: u.indexOf('Trident') > -1,
            presto: u.indexOf('Presto') > -1,
            isChrome: u.indexOf("chrome") > -1,
            isSafari: !u.indexOf("chrome") > -1 && (/webkit|khtml/).test(u),
            isSafari3: !u.indexOf("chrome") > -1 && (/webkit|khtml/).test(u) && u.indexOf('webkit/5') != -1,
            webKit: u.indexOf('AppleWebKit') > -1,
            gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1,
            mobile: !!u.match(/AppleWebKit.*Mobile.*/),
            ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/),
            android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1,
            iPhone: u.indexOf('iPhone') > -1,
            iPad: u.indexOf('iPad') > -1,
            iWinPhone: u.indexOf('Windows Phone') > -1,
        }
    }()
};

// 样式
if (browser.versions.mobile || browser.versions.iWinPhone) {
    // 移动端
    $('.cx-detail.va').addClass('vamobile');
    video.setAttribute('controls', 'controls');
    $(window).load(function () {
        if (typeof page_size_adjustment === 'function'){
            page_size_adjustment();
        }
    });
} else {
    // pc端
    $('.cx-detail.va').removeClass('vamobile');
    video.removeAttribute('controls');
}

// 初始化播放列表
for (var i = 0; i < order.length; i += 1) {
    order[i].onclick = function () {
        var n = this.getAttribute('data-n');
        var u = this.getAttribute("data-u");
        var l = this.getAttribute('data-l');
        var t = this.getAttribute('data-t');
        var d = this.getAttribute('data-id');
        var safe = this.getAttribute('data-safe');

        cut(n, u, l, t, d, safe);
    }
}
// (type, index, id_record)

// 按钮绑定
// 进度条
var ova = VATYPE == 'video' ? video : audio;
// 音频绑定
// 视频绑定
video.ontimeupdate = function () {
    //如果播放的进度大于记录最大值，则更新播放最大值
    if (max_play_schedule[current_lesson_id] < this.currentTime) {
        max_play_schedule[current_lesson_id] = this.currentTime;
    }
    real_time_play_schedule[current_lesson_id] = this.currentTime;
    // 当不播放广告
    var currTime = this.currentTime,
        duration = this.duration;
    if (isAd) {
        var nlast = parseInt(duration - currTime);
        nlast = isNaN(nlast) ? adv.duration : nlast;
        $('.jump-time').text(nlast + '秒')
        if (nlast == 0) {
            fnCloseAdVideo();
        }
    } else {
        var pre = currTime / duration * $('.progress-control .progress-holder').width() + 'px';
        var pre1 = currTime / duration * $('.progress-control .progress-holder').width() - 8 + 'px';
        if (this.buffered.length != 0) {
            var downedload = this.buffered.end(0) / duration * 100 + "%"
        }
        currPlayTime.innerHTML = getFormatTime(currTime);
        totalTime.innerHTML = isNaN(duration) ? "00:00:00" : getFormatTime(duration);
        downed.style.width = downedload;
        loaded.style.width = pre;
        mouse.style.left = pre1;
    }
    if (SAFE != 3) {
        if (firstMp4Time == 1) {
            video.currentTime = cookieTime;
            firstMp4Time = 2
        }
    }
};

audio.ontimeupdate = function () {
    //如果播放的进度大于记录最大值，则更新播放最大值
    if (max_play_schedule[current_lesson_id] < this.currentTime) {
        max_play_schedule[current_lesson_id] = this.currentTime;
    }
    real_time_play_schedule[current_lesson_id] = this.currentTime;
    // 当不播放广告
    // if(当不播放广告){

    // }
    var currTime = this.currentTime,
        duration = this.duration;
    var pre = currTime / duration * $('.progress-control .progress-holder').width() + 'px';
    var pre1 = currTime / duration * $('.progress-control .progress-holder').width() - 8 + 'px';
    if (this.buffered.length != 0) {
        var downedload = this.buffered.end(0) / duration * 100 + "%"
    }
    currPlayTime.innerHTML = getFormatTime(currTime);
    totalTime.innerHTML = isNaN(duration) ? "00:00:00" : getFormatTime(duration);
    downed.style.width = downedload;
    loaded.style.width = pre;
    mouse.style.left = pre1;
};

video.paused ? isPlay.setAttribute('class', 'play-control icon-player_play') : isPlay.setAttribute('class', 'play-control icon-player_play video-pause');
audio.paused ? isPlay.setAttribute('class', 'play-control icon-player_play') : isPlay.setAttribute('class', 'play-control icon-player_play video-pause');

video.onplay = function () {
    isPlay.setAttribute('class', 'play-control icon-player_play video-pause');
    if (is_played_ended) {
        is_played_ended = false;
        statOnPlay();
    }
};
audio.onplay = function () {
    isPlay.setAttribute('class', 'play-control icon-player_play video-pause');
    if (is_played_ended) {
        is_played_ended = false;
        statOnPlay();
    }
};

video.onpause = function () {
    isPlay.setAttribute('class', 'play-control icon-player_play');
    statOnPause();
};
audio.onpause = function () {
    isPlay.setAttribute('class', 'play-control icon-player_play');
    statOnPause();
};

video.onended = function () {
    firstMp4Time = 1;
    statOnEnd();
    var nIndex = NUM - 1;
    if (isAd) {
        // 广告
        isAd = false
        fnCloseAdVideo();
        if (browser.versions.mobile || browser.versions.iWinPhone) {
            video.setAttribute('controls', 'controls');
        }

        SAFE == 3 ? playSafe(playList[parseInt(nIndex)].url, video) : video.src = playList[parseInt(nIndex)].url;
        init();
    } else {
        // 判断顺序播放还是循环播放
        if (playWay == 'loop') {
            cut(playList[parseInt(nIndex)].id, playList[parseInt(nIndex)].url, playList[parseInt(nIndex)].type, playList[parseInt(nIndex)].title, playList[parseInt(nIndex)].media_id)
        } else {
            if (typeof (playList[parseInt(nIndex) + 1]) !== 'undefined') {
                if (typeof (playList[parseInt(nIndex) + 1]).id !== 'undefined') {
                    cut(playList[parseInt(nIndex) + 1].id, playList[parseInt(nIndex) + 1].url, playList[parseInt(nIndex) + 1].type, playList[parseInt(nIndex) + 1].title, playList[parseInt(nIndex) + 1].media_id, playList[parseInt(nIndex) + 1].s_safe);
                }

            }
        }
    }
    //播放到结束，此时该状态为true
    is_played_ended = true;
}
audio.onended = function () {
    statOnEnd();
    var nIndex = NUM - 1;
    // 判断顺序播放还是循环播放
    if (playWay == 'loop') {
        cut(playList[parseInt(nIndex)].id, playList[parseInt(nIndex)].url, playList[parseInt(nIndex)].type, playList[parseInt(nIndex)].title, playList[parseInt(nIndex)].media_id)
    } else {
        if (typeof (playList[parseInt(nIndex) + 1]) !== 'undefined') {
            if (typeof (playList[parseInt(nIndex) + 1].id) !== 'undefined') {
                cut(playList[parseInt(nIndex) + 1].id, playList[parseInt(nIndex) + 1].url, playList[parseInt(nIndex) + 1].type, playList[parseInt(nIndex) + 1].title, playList[parseInt(nIndex) + 1].media_id, playList[parseInt(nIndex) + 1].s_safe);
            }
        }
    }
    //播放到结束，此时该状态为true
    is_played_ended = true;
}
// 播放按钮
isPlay.onclick = function () {
    VATYPE == 'video' ? cxPlay("video") : cxPlay("audio");
};
// 进度条
progress.onclick = function (e) {
    function handle(_this, object) {
        var event = e || window.event;
        var currTime = (event.offsetX / _this.offsetWidth) * object.duration;
        //如果进度条不能拖动，但是想要拖动的位置已经播放过了，还是可以拖动
        if (multimedia_is_drag_adjustment_schedule === false && currTime > max_play_schedule[current_lesson_id]) {
            if (max_play_schedule[current_lesson_id] === 0) {
                currTime = object.currentTime;
            } else {
                currTime = max_play_schedule[current_lesson_id];
            }
        }
        return currTime;
    }

    var currTime = 0;
    if (VATYPE == 'video') {
        video.currentTime = currTime = handle(this, video);
    } else {
        audio.currentTime = currTime = handle(this, audio);
    }
    cookie.set('time_' + current_play_idf, currTime);
    // cookie.set('type_' + id_record, type);
};
// 上一首
playprev.onclick = function () {
    var nIndex = NUM - 1;
    if (typeof (playList[parseInt(nIndex) - 1]) !== 'undefined') {
        if (typeof (playList[parseInt(nIndex) - 1].id) !== 'undefined') {
            cut(playList[parseInt(nIndex) - 1].id, playList[parseInt(nIndex) - 1].url, playList[parseInt(nIndex) - 1].type, playList[parseInt(nIndex) - 1].title, playList[parseInt(nIndex) - 1].media_id, playList[parseInt(nIndex) - 1].s_safe);
        } else {
            cut(playList[parseInt(nIndex)].id, playList[parseInt(nIndex)].url, playList[parseInt(nIndex)].type, playList[parseInt(nIndex)].title, playList[parseInt(nIndex)].media_id, playList[parseInt(nIndex)].s_safe);
        }
    }
}
// 下一首
playnext.onclick = function () {
    var nIndex = NUM - 1;
    if (typeof (playList[parseInt(nIndex) + 1]) !== 'undefined') {
        if (typeof (playList[parseInt(nIndex) + 1].id) !== 'undefined') {
            cut(playList[parseInt(nIndex) + 1].id, playList[parseInt(nIndex) + 1].url, playList[parseInt(nIndex) + 1].type, playList[parseInt(nIndex) + 1].title, playList[parseInt(nIndex) + 1].media_id, playList[parseInt(nIndex) + 1].s_safe);
        } else {
            cut(playList[parseInt(nIndex)].id, playList[parseInt(nIndex)].url, playList[parseInt(nIndex)].type, playList[parseInt(nIndex)].title, playList[parseInt(nIndex)].media_id, playList[parseInt(nIndex)].s_safe);
        }
    }
}
// 前进15s
try {
    playadvance.onclick = function () {
        if (audio.currentTime + 15 <= audio.duration) {
            audio.currentTime = audio.currentTime + 15;
        } else {
            audio.currentTime = audio.duration
        }
    }
}catch (e) {

}
// 后退15s
try {
    playback.onclick = function () {
        if (audio.currentTime - 15 <= 0) {
            audio.currentTime = 0
        } else {
            audio.currentTime = audio.currentTime - 15;
        }
    }
}catch (e) {

}

mouse.onclick = function (e) {
    // 阻止点到拖动点时
    e.stopPropagation();
}
document.getElementById('fullScreenBtn').addEventListener('click', function () {
    launchFullscreen(document.getElementById('videoView'));
}, false)
// 点击播放按钮
$('.play').on('click', function () {
    $(this).hide();
    video.play();
    video.currentTime = 0;
})
// 点击跳过按钮
$('.jump-text').on('click', function () {
    fnCloseAdVideo();
    if (browser.versions.mobile || browser.versions.iWinPhone) {
        video.setAttribute('controls', 'controls');
    }
    var nIndex = NUM - 1;
    SAFE == 3 ? playSafe(playList[parseInt(nIndex)].url, video) : video.src = playList[parseInt(nIndex)].url;
    isAd = false;
    init();
})

if (browser.versions.mobile || browser.versions.iWinPhone) {
    // 拖动 移动端 touch
    mouse.ontouchstart = function () {
        var isplay = ova.paused;
        document.ontouchmove = function (e) {
            audio.pause();
            var multimedia_currentTime = 0;
            //对进度条的长度进行格式化，去除掉错误值
            var nMouseMoveX = e.targetTouches[0].clientX - $('.progress-holder').offset().left;
            if (nMouseMoveX < 0) {
                nMouseMoveX = 0;
            } else if (nMouseMoveX >= $('.progress-control .progress-holder').width() - 1) {
                nMouseMoveX = $('.progress-control .progress-holder').width();
                if (VATYPE == 'video') {
                    multimedia_currentTime = video.duration;
                } else {
                    multimedia_currentTime = audio.duration;
                }
            } else {
                if (VATYPE == 'video') {
                    multimedia_currentTime = nMouseMoveX / $('.progress-control .progress-holder').width() * video.duration;
                } else {
                    multimedia_currentTime = nMouseMoveX / $('.progress-control .progress-holder').width() * audio.duration;
                }
            }
            //如果不允许拖拽，并且已经拖拽的区域大于最大播放位置，则只能播放最大值
            if (multimedia_is_drag_adjustment_schedule === false && multimedia_currentTime > max_play_schedule[current_lesson_id]) {
                if (max_play_schedule[current_lesson_id] === 0) {
                    if (VATYPE == 'video') {
                        currTime = video.currentTime;
                    } else {
                        currTime = audio.currentTime;
                    }
                } else {
                    currTime = max_play_schedule[current_lesson_id];
                }
                multimedia_currentTime = max_play_schedule[current_lesson_id];
            }
            if (VATYPE == 'video') {
                video.currentTime = multimedia_currentTime;
            } else {
                audio.currentTime = multimedia_currentTime;
            }
            loaded.style.width = nMouseMoveX + "px";
            mouse.style.left = nMouseMoveX - 8 + 'px';
        }
        document.ontouchend = function (e) {
            isplay ? ova.pause() : ova.play();
            document.ontouchmove = null;
            document.ontouchend = null;
        }
    }
} else {
    // 拖动  pc mousedown
    mouse.onmousedown = function (e) {
        // 音视频暂停，
        var isplay = ova.paused;
        document.onmousemove = function (e) {
            ova.pause();
            var multimedia_currentTime = 0;
            // 计算拖拽的宽度，通过百分比*duration,给当前播放器赋值时间。
            var nMouseMoveX = e.pageX - $('.progress-holder').offset().left;
            if (nMouseMoveX <= 0) {
                nMouseMoveX = 0;
            } else if (nMouseMoveX >= $('.progress-control .progress-holder').width() - 1) {
                nMouseMoveX = $('.progress-control .progress-holder').width();
                if (VATYPE == 'video') {
                    multimedia_currentTime = video.duration;
                } else {
                    multimedia_currentTime = audio.duration;
                }
            } else {
                if (VATYPE == 'video') {
                    multimedia_currentTime = nMouseMoveX / $('.progress-control .progress-holder').width() * video.duration;
                } else {
                    multimedia_currentTime = nMouseMoveX / $('.progress-control .progress-holder').width() * audio.duration;
                }
            }
            //如果不允许拖拽，并且已经拖拽的区域大于最大播放位置，则只能播放最大值
            if (multimedia_is_drag_adjustment_schedule === false && multimedia_currentTime > max_play_schedule[current_lesson_id]) {
                multimedia_currentTime = max_play_schedule[current_lesson_id];
            }
            if (VATYPE == 'video') {
                video.currentTime = multimedia_currentTime;
            } else {
                audio.currentTime = multimedia_currentTime;
            }
            loaded.style.width = nMouseMoveX + "px";
            mouse.style.left = nMouseMoveX - 8 + 'px';
        }
        document.onmouseup = function () {
            if (isplay) {
                ova.pause();
            } else {
                ova.play();
            }
            // isplay ? ova.pause() : ova.play();
            //清除事件
            document.onmouseup = null;
            document.onmousemove = null;
        }
    }
}

function launchFullscreen(element) {
    if (element.requestFullscreen) {
        element.requestFullscreen()
    } else if (element.mozRequestFullScreen) {
        element.mozRequestFullScreen()
    } else if (element.msRequestFullscreen) {
        element.msRequestFullscreen()
    } else if (element.oRequestFullscreen) {
        element.oRequestFullscreen()
    } else if (element.webkitRequestFullscreen) {
        element.webkitRequestFullScreen()
    } else {
        var docHtml = document.documentElement;
        var docBody = document.body;
        var videobox = document.getElementById('videoView');
        var cssText = 'width:100%;height:100%;overflow:hidden;';
        docHtml.style.cssText = cssText;
        docBody.style.cssText = cssText;
        videobox.style.cssText = cssText + ';margin:0px;padding:0px;';
        document.IsFullScreen = true
    }
}

// m3u8解析
// url地址
// ova音频视频播放对象
function playSafe(url, ova) {
    if (Hls.isSupported()) {
        // hls格式 解析
        var hls = new Hls();
        hls.loadSource(url);
        hls.attachMedia(ova);
        hls.on(Hls.Events.MANIFEST_PARSED, function () {
            // ova.play();
        });
    } else if (ova.canPlayType('application/vnd.apple.mpegurl')) {
        ova.src = url;
        ova.addEventListener('loadedmetadata', function () {
            // ova.play();
        });
    }
}

// 简易播放
function vaHave(isSimple) {
    if (isSimple == 'false') {
        $('.va-list').remove();
        playWay = 'loop';
        //简易播放页初始时音频，视频为暂停状态
        //		window.onload=function(){
        //			video.pause();
        //			audio.pause();
        //		}
    }
}

// 是否是微信
function isWeiXin() {
    var ua = window.navigator.userAgent.toLowerCase();
    if (ua.match(/MicroMessenger/i) == 'micromessenger') {
        return true
    } else {
        return false
    }
}

//次序播放
function sequence_play(type) {
    var start = 0;
    $.each(playList, function (i, v) {
        if (v['media_id'] == current_play_idf) {
            start = i;
            return false;
        }
    });
    if (type === '+') {
        for (var i = start; i < playList.length; i++) {
            var index = (type === '+') ? (i + 1) : (i - 1);
            if (empty(playList[index])) {
                //调用拆分逻辑
                if (typeof split_play_assist === 'function') {
                    split_play_assist(current_play_idf);
                }
                break;
            } else {
                if (playList[index].type == type_record) {
                    cut(playList[index].id, playList[index].url, playList[index].type, playList[index].title, playList[index].media_id, playList[index].s_safe);
                    break;
                }
            }
        }
    } else {
        for (var i = start; i >= 0; i--) {
            var index = (type === '+') ? (i + 1) : (i - 1);
            if (empty(playList[index])) {
                //调用拆分逻辑
                if (typeof split_play_assist === 'function') {
                    split_play_assist(current_play_idf);
                }
                break;
            } else {
                if (playList[index].type == type_record) {
                    cut(playList[index].id, playList[index].url, playList[index].type, playList[index].title, playList[index].media_id, playList[index].s_safe);
                    break;
                }
            }
        }
    }
}

// 时间格式化
function getFormatTime(time) {
    var time = time > 10000000000 ? 0 : (time || 0);
    var h = parseInt(time / 3600),
        m = parseInt(time % 3600 / 60),
        s = parseInt(time % 60);
    h = h < 10 ? "0" + h : h;
    m = m < 10 ? "0" + m : m;
    s = s < 10 ? "0" + s : s;
    return h + ":" + m + ":" + s
}

// 播放
function cxPlay(type) {
    if (type == 'audio') {
        audio.paused ? audio.play() : audio.pause();
    } else if (type == 'video') {
        video.paused ? video.play() : video.pause();
    }
}

// 播放
var stat_media_play_times = 0;
//多媒体（音频、视频）能否拖动以改变进度，默认不能
var multimedia_is_drag_adjustment_schedule = true;


function statOnPlay() {
    //音频播放触发统计事件（定时器开始）
    stat_media_play_times++;
    if (stat_media_play_times === 1) {
        if (typeof statTriggerStartTiming === 'function') {
            statTriggerStartTiming();
        }
    } else {
        if (typeof statMediaPlay === 'function') {
            statMediaPlay();
        }
    }
}

function statOnPause() {
    //音频播放暂停触发统计事件(定时器暂停)
    if (typeof statMediaPause === 'function') {
        statMediaPause();
    }
}

function statOnEnd() {
    //音频播放结束触发统计事件(播放结束)
    if (typeof statMediaComplete === 'function') {
        statMediaComplete();
    }
    stat_media_play_times = 0;
}

/**
 * 落实媒体最大长度获取功能
 */
function theoreticalLengthImplement() {
    if (VATYPE === 'audio') {
        return audio.duration;
    } else {
        return video.duration;
    }
}

function historyRecordImplement() {
    return real_time_play_schedule[current_lesson_id];
}

function maxhistoryRecordImplement() {
    return max_play_schedule[current_lesson_id];
}

function mediaIsDoneImplement(play_completion_rule) {
    var play_final_type = 2;
    var play_final_val = 0.8;
    try {
        play_completion_rule = isJson(play_completion_rule) ? jsonDecode(play_completion_rule) : {};
        if (Object.keys(play_completion_rule).length > 0 && typeof play_completion_rule['type'] !== 'undefined' && typeof play_completion_rule['val'] !== 'undefined') {
            play_final_type = parseInt(play_completion_rule['type']);
            play_final_val = parseFloat(play_completion_rule['val']);
        }
    } catch (e) {
    }
    var result = 0;
    switch (play_final_type) {
        case 1:
            result = 1;
            break;
        case 2:
            if (theoreticalLengthImplement() - historyRecordImplement() <= 3) {
                result = 1;
            }
            break;
        case 3:
            if ((historyRecordImplement() / theoreticalLengthImplement()) >= (play_final_val / 100)) {
                result = 1;
            }
            break;
    }
    return dbEBase(Ebase(result));
}

// 进入全屏
function requestFullScreen() {
    // var de = document.documentElement;
    var de = document.getElementById('fullScreenBtn');
    if (de.requestFullscreen) {
        de.requestFullscreen();
    } else if (de.mozRequestFullScreen) {
        de.mozRequestFullScreen();
    } else if (de.webkitRequestFullScreen) {
        de.webkitRequestFullScreen();
    }
    // oFullScreen.hide();
    // oExitFullScreen.show();
}

// 退出全屏
function exitFullscreen() {
    var de = document;
    if (de.exitFullscreen) {
        de.exitFullscreen();
    } else if (de.mozCancelFullScreen) {
        de.mozCancelFullScreen();
    } else if (de.webkitCancelFullScreen) {
        de.webkitCancelFullScreen();
    }
    // oFullScreen.show();
    // oExitFullScreen.hide();
}

// sel_num:播放列表下标(播放顺序)
// url
// type: audio:音频, video:视频
// title: 标题
// media_id: 播放对象id
// s_safe: 1:默认加密  2:阿里云安全下载  3:hls加密
var current_lesson_id = 0;

function cut(sel_num, url, type, title, media_id, s_safe) {
    is_played_ended = false;

    //新一首播放的时候，暂停上一首的心跳统计
    if (typeof statMediaComplete === 'function') {
        statMediaComplete();
    }

    firstMp4Time = 1;
    stat_media_play_times = 0;
    current_lesson_id = media_id.replace(item_id, '');
    //当前选中的lesson id 赋值给统计需要发送的lesson id
    if (typeof statisticsCollection !== 'undefined') {
        statisticsCollection.currentLessonId = current_lesson_id;
    }
    //当前选中lesson的媒体类型，赋值给统计属性
    if (typeof statisticsCollection !== 'undefined') {
        if (type === 'audio') {
            statisticsCollection.currentViewType = 3;
        } else if (type === 'video') {
            statisticsCollection.currentViewType = 4;
        }
    }
    if (current_lesson_id != 0 && typeof statisticsCollection !== 'undefined') {
        if (typeof statisticsCollection.getRTLessonSchedule === 'function') {
            var cloud_schedule = statisticsCollection.getRTLessonSchedule(current_lesson_id);
            try {
                max_play_schedule[current_lesson_id] = cloud_schedule['max_position'] || 0;
                real_time_play_schedule[current_lesson_id] = cloud_schedule['position'] || 0;
            } catch (e) {

            }
        }
        if (typeof cloud_schedule['is_done'] === 'undefined') {
            cloud_schedule['is_done'] = 0;
        }
        if (typeof statisticsCollection !== 'undefined' && typeof statisticsCollection.isCanBeDrag === 'function') {
            var isCanBeDrag = statisticsCollection.isCanBeDrag(current_lesson_id, cloud_schedule['is_done'])
            if (isCanBeDrag) {
                //能进行拖动
                if (browser.versions.mobile || browser.versions.iWinPhone) {
                    $('#playadvance,#playback').show(); //隐藏前进后退按钮
                }
                multimedia_is_drag_adjustment_schedule = true;
            } else {
                //不能进行拖动
                $('#playadvance,#playback').hide(); //隐藏前进后退按钮
                multimedia_is_drag_adjustment_schedule = false;
            }
        } else {
            //不能进行拖动
            $('#playadvance,#playback').hide(); //隐藏前进后退按钮
            multimedia_is_drag_adjustment_schedule = false;
        }
    }

    NUM = parseInt(sel_num);//下标
    VATYPE = type;//当前播放类型
    SAFE = s_safe;//加密方式
    current_play_idf = media_id; //音频id

    var ova = type == 'video' ? video : audio;
    //清除上一首
    clear();
    //
    autoCheckCollect();

    try {
        cookieTime = real_time_play_schedule[current_lesson_id] || 0;
    } catch (e) {

    }
    cookieTime = parseInt(cookieTime);
    //每100毫秒扫描一次音频的状态，当音频可以播放的时候，赋值历史进度给音频
    var int_flag_times = 0;
    var int_flag_id = setInterval(function () {
        int_flag_times++;
        if (ova.readyState == 4) {
            clearInterval(int_flag_id);
            mediaPlay(ova, cookieTime, 4);
        }
        if (int_flag_times >= 1000) {
            clearInterval(int_flag_id);
        }
    }, 300);
    // 播放列表
    $('.playlist_song[data-id="' + media_id + '"]').addClass('mtree-active mtree_check');
    $('.playlist_song').not('[data-id="' + media_id + '"]').removeClass('mtree-active mtree_check');

    // title 名称
    $('#play_title').text(title);
    $('.header-mobile-center>p').text(title);

    // adVideoPlay
    if (type == 'video') {
        $('.cx-detail.va').addClass('v');
        $('.cx-detail.va').removeClass('a');
        // audio.src = '';
        audio.pause();
        // 插播广告 当前在播的是什么，
        if (isWeiXin()) {
            if (!$.isEmptyObject(adv)) {
                isAd = true;
                // 有广告的时候控制条不能点击
                $('#mp-control').css('pointer-events', 'none');
                video.removeAttribute('controls');
                // 是否有跳过
                // adv_tactics.skip_status==1?$('.jump-text').show():$('.jump-text').hide();
                $('.jump-text').show()
                $('.jump-time').text(adv.duration + '秒');
                // 移除控制条
                $('#videoView').addClass('advideo');
                $('.ad').removeClass('none');
                // 只有视频有广告
                $('.cx-detail.va').addClass('v');

                $('#videoView').attr('src', adv.url);
                $('#videoView')[0].currentTime = 0;
                $('#videoView')[0].play();
                //监听能否播放
                if ($('#videoView')[0].paused) {
                    $('.play').css('display', 'block')
                } else {
                    $('.play').css('display', 'none')
                }
            } else {
                isAd = false;
                s_safe == 3 ? playSafe(url, ova) : ova.src = url;
                init();
            }
        } else {
            isAd = false;
            s_safe == 3 ? playSafe(url, ova) : ova.src = url;
            init();
        }
    } else if (type = 'audio') {
        $('.cx-detail.va').addClass('a');
        $('.cx-detail.va').removeClass('v');
        // video.src = '';
        video.pause();
        fnCloseAdVideo();
        // 1.src加到播放器上
        s_safe == 3 ? playSafe(url, ova) : ova.src = url;

        init();
    }

    function clear() {
        currPlayTime.innerHTML = getFormatTime(0);
        totalTime.innerHTML = "00:00:00";
        downed.style.width = 0;
        loaded.style.width = 0;
        mouse.style.left = '-8px';
    }
}

function init() {
    // 当时播放器可以播放的时候再播
    if (VATYPE == 'video') {
        // 当浏览器开始寻找指定的音频/视频时，会发生 loadstart 事件。即当加载过程开始时。

        //当指定音频/视频的时长数据发生变化时，发生 durationchange 事件。
        //当音频/视频加载后，时长将由 "NaN" 变为音频/视频的实际时长。

        // 当指定的音频/视频的元数据已加载时，会发生 loadedmetadata 事件。

        // 当当前帧的数据已加载，但没有足够的数据来播放指定音频/视频的下一帧时，会发生 loadeddata 事件

        // 当浏览器预计能够在不停下来进行缓冲的情况下持续播放指定的音频/视频时，会发生 canplaythrough 事件。
        if (browser.versions.android) {
            if (SAFE == 3) {
                video.once('loadedmetadata', function () {
                    if (!isAd) {
                        mediaPlay(video, cookieTime);
                    }
                });
                // 当浏览器能够开始播放指定的音频/视频时，发生 canplay 事件。
                video.once('canplay', function () {
                    if (!isAd) {
                        mediaPlay(video, cookieTime);
                    }
                });
            } else {
                video.once('loadedmetadata', function () {
                    if (!isAd) {
                        mediaPlay(video, cookieTime);
                    }
                });
            }
        } else {
            video.once('loadedmetadata', function () {
                if (!isAd) {
                    mediaPlay(video, cookieTime);
                }
            });
            // 当浏览器能够开始播放指定的音频/视频时，发生 canplay 事件。
            video.once('canplay', function () {
                if (!isAd) {
                    mediaPlay(video, cookieTime);
                }
            });
        }
    } else {
        if (audio.readyState != 4) {
            setTimeout(init, 100);
        } else {
            mediaPlay(audio, cookieTime);
        }
        audio.once('loadedmetadata', function () {
            mediaPlay(audio, cookieTime);
        });
        // 当浏览器能够开始播放指定的音频/视频时，发生 canplay 事件。
        audio.once('canplay', function () {
            mediaPlay(audio, cookieTime);
        });
    }
}

function fnCloseAdVideo() {
    $('.ad').addClass('none');
    $('#videoView').removeClass('advideo');

    $('#mp-control').css('pointer-events', 'auto');
}

//检查是否收藏，并更新收藏信息及文件信息
function autoCheckCollect() {
    var collectStatus = $(".mtree_check").attr("collect-status");
    if (collectStatus != undefined) {
        if (collectStatus == 1) {
            $('.icon-like').addClass("on");
        } else {
            $('.icon-like').removeClass("on");
        }
    }
}

function mediaPlay(media, schedule) {
    var type = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];
    if (Math.abs(media.duration - schedule) <= 5) {
        media.currentTime = 0;
    } else {
        media.currentTime = schedule;
    }
    media.play();
    if (type === 4) {
        statOnPlay();
    }
}
